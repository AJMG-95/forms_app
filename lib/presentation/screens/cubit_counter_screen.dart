import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart'; // Necesario para usar BlocProvider y BlocBuilder
import 'package:forms_app/presentation/blocs/cubits/counter/counter_cubit.dart'; // Importa el Cubit creado anteriormente

class CubitCounterScreen extends StatelessWidget {
  static String name =
      'cubitCounterScreen'; // Nombre est√°tico √∫til para navegaci√≥n
  const CubitCounterScreen({super.key});

  @override
  Widget build(BuildContext context) {
    final textStyle = Theme.of(context).textTheme;

    return BlocProvider(
      create:
          (_) =>
              CounterCubit(), // Aqu√≠ se inyecta el Cubit en el √°rbol de widgets
      child: _CubitCounterView(
        textStyle: textStyle,
      ), // Se pasa al hijo que lo consumir√°
    );

    /*
      üîÅ Comparaci√≥n con Riverpod:
      Aqu√≠ se usa BlocProvider para proporcionar el Cubit, parecido a c√≥mo usar√≠as un
      `ProviderScope` + `ref.watch(myStateNotifierProvider)` en Riverpod.
    */
  }
}

class _CubitCounterView extends StatelessWidget {
  const _CubitCounterView({required this.textStyle});
  final TextTheme textStyle;

  void increaseCounterBy(BuildContext context, [int value = 1]) {
    context.read<CounterCubit>().increaseBy(value);
  }

  @override
  Widget build(BuildContext context) {
    // üëÄ context.watch<CounterCubit>().state
    // Este m√©todo escucha el Cubit y obtiene el estado actual (CounterState).
    // Cada vez que se emite un nuevo estado desde el Cubit, este widget completo se vuelve a construir.
    // Es √∫til si necesitas acceder a propiedades del estado fuera del BlocBuilder.
    // üü† CUIDADO: Si el estado cambia, TODO el m√©todo build se ejecuta de nuevo, lo que puede ser menos eficiente.
    // üîÅ En Riverpod, esto ser√≠a equivalente a: final state = ref.watch(counterProvider);
    // final counterState = context.watch<CounterCubit>().state;

    return Scaffold(
      appBar: AppBar(
        /* title: Text(
          'Cubit Counter ${counterState.transactionCount}',
          style: textStyle.titleLarge,
        ), */
        title: context.select((CounterCubit value) {
          return Text(
            'Cubit Counter ${value.state.transactionCount}',
            style: textStyle.titleLarge,
          );
          // ‚úÖ context.select<T, R>((T) => R) permite "escuchar" solo una parte del estado del Cubit.
          // En este caso, escucha solo `transactionCount` del estado actual.
          // El widget solo se reconstruir√° si ese valor espec√≠fico cambia.
          //
          // üü® Esto es funcionalmente similar a BlocBuilder con `buildWhen`, pero m√°s directo y local.
          // üü£ En Riverpod ser√≠a: ref.watch(counterProvider.select((s) => s.transactionCount))
        }),

        actions: [
          IconButton(
            onPressed: () {
              context.read<CounterCubit>().reset();
            },
            icon: Icon(Icons.refresh_rounded),
          ),
        ],
      ),
      body: Center(
        child: BlocBuilder<CounterCubit, CounterState>(
          // BlocBuilder escucha cambios en el estado emitido por el Cubit
          // y reconstruye **solo** el widget dentro del builder.

          // buildWhen: (previous, current) => current.counter != previous.counter,
          // ‚§¥Ô∏è Esto permite evitar renders innecesarios si, por ejemplo,
          //     solo quieres reconstruir si el contador cambia (no transactionCount).
          builder: (context, state) {
            // El estado m√°s reciente del Cubit llega aqu√≠ como par√°metro `state`
            // Esto hace que **solo este widget** se reconstruya cuando cambie el estado.
            debugPrint('el estado cmabio');
            return Text('Counter value: ${state.counter}');
            // Se muestra el valor actual del contador
          },
        ),
      ),
      floatingActionButton: Column(
        mainAxisAlignment: MainAxisAlignment.end,
        spacing: 15,
        children: [
          FloatingActionButton(
            heroTag: '1',
            child: Text('+3', style: textStyle.bodyMedium),
            onPressed: () => increaseCounterBy(context, 3),
          ),
          FloatingActionButton(
            heroTag: '2',
            child: Text('+2', style: textStyle.bodyMedium),
            onPressed: () => increaseCounterBy(context, 2),
          ),
          FloatingActionButton(
            heroTag: '3',
            child: Text('+1', style: textStyle.bodyMedium),
            onPressed: () => increaseCounterBy(context),
          ),
        ],
      ),
    );
  }
}
